"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MakerDeb = exports.debianArch = void 0;
const node_path_1 = __importDefault(require("node:path"));
const maker_base_1 = require("@electron-forge/maker-base");
function debianArch(nodeArch) {
    switch (nodeArch) {
        case 'ia32':
            return 'i386';
        case 'x64':
            return 'amd64';
        case 'armv7l':
            return 'armhf';
        case 'arm':
            return 'armel';
        default:
            return nodeArch;
    }
}
exports.debianArch = debianArch;
class MakerDeb extends maker_base_1.MakerBase {
    constructor() {
        super(...arguments);
        this.name = 'deb';
        this.defaultPlatforms = ['linux'];
        this.requiredExternalBinaries = ['dpkg', 'fakeroot'];
    }
    isSupportedOnCurrentPlatform() {
        return this.isInstalled('electron-installer-debian');
    }
    async make({ dir, makeDir, targetArch }) {
        // eslint-disable-next-line n/no-missing-require
        const installer = require('electron-installer-debian');
        const outDir = node_path_1.default.resolve(makeDir, 'deb', targetArch);
        await this.ensureDirectory(outDir);
        const { packagePaths } = await installer({
            options: {},
            ...this.config,
            arch: debianArch(targetArch),
            src: dir,
            dest: outDir,
            rename: undefined,
        });
        return packagePaths;
    }
}
exports.default = MakerDeb;
exports.MakerDeb = MakerDeb;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFrZXJEZWIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvTWFrZXJEZWIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsMERBQTZCO0FBRTdCLDJEQUFxRTtBQUtyRSxTQUFnQixVQUFVLENBQUMsUUFBbUI7SUFDNUMsUUFBUSxRQUFRLEVBQUUsQ0FBQztRQUNqQixLQUFLLE1BQU07WUFDVCxPQUFPLE1BQU0sQ0FBQztRQUNoQixLQUFLLEtBQUs7WUFDUixPQUFPLE9BQU8sQ0FBQztRQUNqQixLQUFLLFFBQVE7WUFDWCxPQUFPLE9BQU8sQ0FBQztRQUNqQixLQUFLLEtBQUs7WUFDUixPQUFPLE9BQU8sQ0FBQztRQUNqQjtZQUNFLE9BQU8sUUFBUSxDQUFDO0lBQ3BCLENBQUM7QUFDSCxDQUFDO0FBYkQsZ0NBYUM7QUFFRCxNQUFxQixRQUFTLFNBQVEsc0JBQXlCO0lBQS9EOztRQUNFLFNBQUksR0FBRyxLQUFLLENBQUM7UUFFYixxQkFBZ0IsR0FBb0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUU5Qyw2QkFBd0IsR0FBYSxDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQztJQXdCNUQsQ0FBQztJQXRCQyw0QkFBNEI7UUFDMUIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLDJCQUEyQixDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUVELEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBZ0I7UUFDbkQsZ0RBQWdEO1FBQ2hELE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1FBRXZELE1BQU0sTUFBTSxHQUFHLG1CQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFFeEQsTUFBTSxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ25DLE1BQU0sRUFBRSxZQUFZLEVBQUUsR0FBRyxNQUFNLFNBQVMsQ0FBQztZQUN2QyxPQUFPLEVBQUUsRUFBRTtZQUNYLEdBQUcsSUFBSSxDQUFDLE1BQU07WUFDZCxJQUFJLEVBQUUsVUFBVSxDQUFDLFVBQVUsQ0FBQztZQUM1QixHQUFHLEVBQUUsR0FBRztZQUNSLElBQUksRUFBRSxNQUFNO1lBQ1osTUFBTSxFQUFFLFNBQVM7U0FDbEIsQ0FBQyxDQUFDO1FBRUgsT0FBTyxZQUFZLENBQUM7SUFDdEIsQ0FBQztDQUNGO0FBN0JELDJCQTZCQztBQUVRLDRCQUFRIn0=