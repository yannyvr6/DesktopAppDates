"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@electron-forge/core");
const commander_1 = require("commander");
require("./util/terminate");
const package_json_1 = __importDefault(require("../package.json"));
const resolve_working_dir_1 = require("./util/resolve-working-dir");
(async () => {
    let commandArgs = process.argv;
    let appArgs;
    const doubleDashIndex = process.argv.indexOf('--');
    if (doubleDashIndex !== -1) {
        commandArgs = process.argv.slice(0, doubleDashIndex);
        appArgs = process.argv.slice(doubleDashIndex + 1);
    }
    let dir;
    commander_1.program
        .version(package_json_1.default.version, '-V, --version', 'Output the current version.')
        .helpOption('-h, --help', 'Output usage information.')
        .argument('[dir]', 'Directory to run the command in. (default: current directory)')
        .option('-p, --app-path <path>', 'Path to the Electron app to launch. (default: current directory)')
        .option('-l, --enable-logging', 'Enable internal Electron logging.')
        .option('-n, --run-as-node', 'Run the Electron app as a Node.JS script.')
        .addOption(new commander_1.Option('--vscode').hideHelp()) // Used to enable arg transformation for debugging Electron through VSCode. Hidden from users.
        .option('-i, --inspect-electron', 'Run Electron in inspect mode to allow debugging the main process.')
        .option('--inspect-brk-electron', 'Run Electron in inspect-brk mode to allow debugging the main process.')
        .addHelpText('after', `
      Any arguments found after "--" will be passed to the Electron app. For example...
      
          $ npx electron-forge start /path/to/project --enable-logging -- -d -f foo.txt
                                    
      ...will pass the arguments "-d -f foo.txt" to the Electron app.`)
        .action((targetDir) => {
        dir = (0, resolve_working_dir_1.resolveWorkingDir)(targetDir);
    })
        .parse(commandArgs);
    const options = commander_1.program.opts();
    const opts = {
        dir,
        interactive: true,
        enableLogging: !!options.enableLogging,
        runAsNode: !!options.runAsNode,
        inspect: !!options.inspectElectron,
        inspectBrk: !!options.inspectBrkElectron,
    };
    if (options.vscode && appArgs) {
        // Args are in the format ~arg~ so we need to strip the "~"
        appArgs = appArgs.map((arg) => arg.substr(1, arg.length - 2)).filter((arg) => arg.length > 0);
    }
    if (options.appPath)
        opts.appPath = options.appPath;
    if (appArgs)
        opts.args = appArgs;
    const spawned = await core_1.api.start(opts);
    await new Promise((resolve) => {
        const listenForExit = (child) => {
            // Why: changing to const causes TypeScript compilation to fail.
            /* eslint-disable prefer-const */
            let onExit;
            let onRestart;
            /* eslint-enable prefer-const */
            const removeListeners = () => {
                child.removeListener('exit', onExit);
                child.removeListener('restarted', onRestart);
            };
            onExit = (code) => {
                removeListeners();
                if (spawned.restarted)
                    return;
                if (code !== 0) {
                    process.exit(code);
                }
                resolve();
            };
            onRestart = (newChild) => {
                removeListeners();
                listenForExit(newChild);
            };
            child.on('exit', onExit);
            child.on('restarted', onRestart);
        };
        listenForExit(spawned);
    });
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxlY3Ryb24tZm9yZ2Utc3RhcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvZWxlY3Ryb24tZm9yZ2Utc3RhcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwrQ0FBeUQ7QUFFekQseUNBQTRDO0FBRTVDLDRCQUEwQjtBQUMxQixtRUFBMEM7QUFFMUMsb0VBQStEO0FBRS9ELENBQUMsS0FBSyxJQUFJLEVBQUU7SUFDVixJQUFJLFdBQVcsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO0lBQy9CLElBQUksT0FBTyxDQUFDO0lBRVosTUFBTSxlQUFlLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbkQsSUFBSSxlQUFlLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUMzQixXQUFXLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBQ3JELE9BQU8sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVELElBQUksR0FBRyxDQUFDO0lBQ1IsbUJBQU87U0FDSixPQUFPLENBQUMsc0JBQVcsQ0FBQyxPQUFPLEVBQUUsZUFBZSxFQUFFLDZCQUE2QixDQUFDO1NBQzVFLFVBQVUsQ0FBQyxZQUFZLEVBQUUsMkJBQTJCLENBQUM7U0FDckQsUUFBUSxDQUFDLE9BQU8sRUFBRSwrREFBK0QsQ0FBQztTQUNsRixNQUFNLENBQUMsdUJBQXVCLEVBQUUsa0VBQWtFLENBQUM7U0FDbkcsTUFBTSxDQUFDLHNCQUFzQixFQUFFLG1DQUFtQyxDQUFDO1NBQ25FLE1BQU0sQ0FBQyxtQkFBbUIsRUFBRSwyQ0FBMkMsQ0FBQztTQUN4RSxTQUFTLENBQUMsSUFBSSxrQkFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsOEZB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